#!/bin/bash

# Copyright June 12 2017 SW , Up to date 11/2/2017
# You should install ssh first: sudo apt-get install openssh-server ; sudo /etc/init.d/ssh start
# Function: Connected DUT in one step
# Usage : path/to/ssh <DUT_IP> <sub-command>
#         --sign                          #sign in dut"        
#         --cp local_file dut_dir         #cp host file to dut, Note: "~" != "/home/username" in dut
#         --fetch dut_file local_dir      #fetch dut file			 
#         --diff <dut_file> <local_file>  #diff dut files and local file"
#         --cmd cmds                      #send and run you cmd on dut, eg: ... --cmd "factory_restart"
#TODO     --factory_bug	<local_dir>				#								
#    	    --screenshot <local_dir>        #get the screen shot of current UI

declare DUT_IP
declare HOST_IP="192.168.1.99"
declare user
declare password
declare host_file
declare host_dir
declare dut_file
declare dut_dir
declare cmd

#get the ssh and ssh_to_dut directory
PATH_TO_SSH=`echo ${0%/*}`

#`ssh-keygen -f "/home/zgh/.ssh/known_hosts" -R $DUT_IP`
PATH_TO_known_hosts=`cd;pwd`/.ssh/known_hosts

usage_help()  {
    echo "Usage: $PATH_TO_SSH/ssh <DUT_IP> <sub-command>"
    echo "default: user=root "
    echo "<sub-command>:"
    echo "  --sign                          #sign in dut"
    echo "  --cp <local_file> <dut_dir>     #cp host files to dut,Note: "~" != "/home/username" in dut"
    echo "  --fetch <dut_file> <local_dir>  #fetch dut files to local"
    echo "  --diff <dut_file> <local_file>  #diff dut files and local file"
    echo "  --cmd <cmds>                    #send and run you cmd on dut,eg: ... --cmd \"factory_restart\""
    echo "  --screenshot <local_dir>        #get the screen shot of current UI"
    echo "  waitting to improve !!!"
}

info() {
    echo "[DEBUG]: $*" 1>&2
}

# Function: judge whether the ip works or not
# Usage: $0 <IP>
is_ip_ok() {
    IP=$1
    ping -c 1 -w 1 $IP &> /dev/null && result=1 || result=0
    if [ "$result" != "1" ]; then
        info ping $IP failed !!!
        return 1 && exit
    fi
}

# Function: set the username/password/ip for given args, and ensure the ip is good
# Usage: $0 <DUT_IP/User>
remote_host_set() {
    for IP_SET in $(seq 5 10)
    do     
	if [ "$1" == "101.1.2.$IP_SET" ] || [ "$1" == "chrome" ] || [ "$1" == "dut" ]; then
            #connect to chromebook
            user=root
            password="test0000"
            DUT_IP="101.1.2.$IP_SET"
	    if [ "$DUT_IP" == "101.1.2.4" ]; then
		continue				
            fi 
            is_ip_ok $DUT_IP || continue
            info $user:$password@$DUT_IP
            return
        fi
    done

    if [ "$1" == "192.168.1.2" ] || [ "$1" == "10.0.0.10" ]; then
    #connect to dell server
        user=sw
        password="bitlandsw"
        DUT_IP="192.168.1.2"

    elif [ "$1" == "192.168.1.3" ] || [ "$1" == "simon" ]; then
    #connect to Simon
        user=simon
        password="123"
        DUT_IP="192.168.1.3"

    elif [ "$1" == "192.168.1.4" ] || [ "$1" == "black" ]; then
    #connect to black
        user=black
        password="123"
        DUT_IP="192.168.1.4"

    elif [ "$1" == "192.168.1.5" ] || [ "$1" == "karen" ]; then
    #connect to Karen
        user=karen
        password="123"
        DUT_IP="192.168.1.5"

    elif [ "$1" == "192.168.1.6" ] || [ "$1" == "wang" ]; then
    #connect to wang
        user=wang
        password="123"
        DUT_IP="192.168.1.6"

    elif [ "$1" == "192.168.1.8" ] || [ "$1" == "gc" ]; then
    #connect to gc
        user=gc
        password="123"
        DUT_IP="192.168.1.8"

    elif [ "$1" == "192.168.1.79" ] || [ "$1" == "zxy" ]; then
    #connect to zxy
        user=zxy
        password="   "
        DUT_IP="192.168.1.79"

    elif [ "$1" == "10.240.16.140" ] || [ "$1" == "bitland85" ]; then
    #connect to bitland 85 server 140\37
        user=bitland
        password="hftest"
        DUT_IP="10.240.16.140"

    elif [ "$1" == "-h" ] || [ "$1" == "help" ]; then
        usage_help
        exit 1

    elif [ "$1" != "" ] && [ "$user" == "" ]; then
        read -p "username: " user
        read -p "password: " password
				DUT_IP=$1

    else
        usage_help
        exit 1
    fi
    is_ip_ok $DUT_IP
    info $user:$password@$DUT_IP
}
#remote_host_set $1

message() {
    if [ $? == 0 ]; then
        echo $@ =================================== [ok!] 1>&2
    else
        echo $@ =================================== [fail!] 1>&2
        exit 1
    fi
}

#command: `ssh $user@$DUT_IP`
ssh_cmd() {
		#echo Running command: "ssh-keygen -f "$PATH_TO_known_hosts" -R $DUT_IP"
		#ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@<IP_address>
		#ssh-keygen -f "$PATH_TO_known_hosts" -R $DUT_IP

		if [ -z "$(ssh-keygen -F "$DUT_IP")" ]; then
  		ssh-keyscan -H $IP >> $PATH_TO_known_hosts
		fi
		echo Running command: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $user@$DUT_IP
		/usr/bin/expect <<-EOF
		set time 1

		spawn ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $user@$DUT_IP
		expect "yes/no" {send  "yes\r"}
		expect "Password: " {send "$password\n"}
		interact
		#expect eof
EOF
		message ssh $user@$DUT_IP $1
}

#command:`scp $host_file $user@$DUT_IP:$dut_dir`
#scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $host_file $user@$DUT_IP:$dut_dir
ssh_cp() {
		#echo Running command: "ssh-keygen -f "$PATH_TO_known_hosts" -R $DUT_IP"
		#ssh-keygen -f "$PATH_TO_known_hosts" -R $DUT_IP

		if [ -z "$(ssh-keygen -F "$DUT_IP")" ]; then
  		ssh-keyscan -H $IP >> $PATH_TO_known_hosts
		fi
		echo Running command: scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $host_file $user@$DUT_IP:$dut_dir
		/usr/bin/expect <<-EOF
		set time 10
		spawn scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $host_file $user@$DUT_IP:$dut_dir
		expect "yes/no" {send  "yes\r"}
		expect "assword: " {send "$password\n"}
		#interact
		expect eof
EOF
		message scp -r ${host_file} ${user}@${DUT_IP}:${dut_dir}
#echo scp -r ${host_file} ${user}@${DUT_IP}:${dut_dir}  [ok!] 
}

#command:`scp $dut_file $user@$DUT_IP:$host_dir`
#scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $dut_file $user@$DUT_IP:$host_file
ssh_fetch() {
		#echo Running command: "ssh-keygen -f "$PATH_TO_known_hosts" -R $DUT_IP"
		#ssh-keygen -f "$PATH_TO_known_hosts" -R $DUT_IP

		if [ -z "$(ssh-keygen -F "$DUT_IP")" ]; then
  		ssh-keyscan -H $IP >> $PATH_TO_known_hosts
		fi
		echo Running command: scp -r $user@$DUT_IP:$dut_file $host_dir
		/usr/bin/expect <<-EOF
		set time 10
		spawn scp -r $user@$DUT_IP:$dut_file $host_dir
		expect "yes/no" {send  "yes\r"}
		expect "assword: " {send "$password\n"}
		#interact
		expect eof
EOF
		message scp -r $user@$DUT_IP:$dut_file $host_dir
}



#command:`diff $user@$DUT_IP:$dut_file $host_file`
ssh_diff() {
    local dut_file_name
    local host_tmp_dir=/tmp
    local dut_diff_local

		#echo Running command: "ssh-keygen -f "$PATH_TO_known_hosts" -R $DUT_IP"
		#ssh-keygen -f "$PATH_TO_known_hosts" -R $DUT_IP

		if [ -z "$(ssh-keygen -F "$DUT_IP")" ]; then
  		ssh-keyscan -H $IP >> $PATH_TO_known_hosts
		fi
		echo Running command: scp -r $user@$DUT_IP:$dut_file $host_tmp_dir
		/usr/bin/expect <<-EOF
		set time 10
		spawn scp -r $user@$DUT_IP:$dut_file $host_tmp_dir
		expect "yes/no" {send  "yes\r"}
		expect "assword: " {send "$password\n"}
		#interact
		expect eof
EOF
		message scp -r $user@$DUT_IP:$dut_file $host_tmp_dir
		dut_file_name=`echo ${dut_file##*/}` #split the dut_file name
		dut_diff_local=`echo ${dut_file_name}.log`
		sudo touch $host_tmp_dir/$dut_diff_local
		sudo chmod 777 $host_tmp_dir/$dut_diff_local
		echo "====================================start==================================" >> $host_tmp_dir/$dut_diff_local
		echo Running command: diff --iurNB $host_tmp_dir/$dut_file_name $host_file
		diff -iurNB $host_tmp_dir/$dut_file_name $host_file
		diff -Naur $host_tmp_dir/$dut_file_name $host_file >> $host_tmp_dir/$dut_diff_local
		echo "**************************************end**********************************" >> $host_tmp_dir/$dut_diff_local
		message diff -iurNB $host_tmp_dir/$dut_file_name $host_file
}

ssh_sign() {
    ssh_cmd
    #will sign in to dut
    echo Running command: $PATH_TO_SSH/ssh_to_dut $DUT_IP $cmd
    if [ "$cmd" != "" ]; then
        ${PATH_TO_SSH}/ssh_to_dut $user $password $DUT_IP "export DISPLAY=$DUT_IP:0.0; $cmd" #  send a cmd
        ${PATH_TO_SSH}/ssh_to_dut $user $password $DUT_IP        #just log on to dut
    else
        ${PATH_TO_SSH}/ssh_to_dut $user $password $DUT_IP        #just log on to dut
    fi
}

ssh_screenshot_chrome() {
    set -x
    local host_file="${PATH_TO_SSH}/tool/screenshot.sh"
    local dut_dir="/tmp/"

    local host_dir="$1"
    local dut_file="/tmp/screenshot.png"
    ssh_cp ; sleep 1
    ${PATH_TO_SSH}/ssh_to_dut $user $password $DUT_IP "sh /tmp/screenshot.sh Robo" #send a cmd
    sleep 24
    set +x
    ssh_fetch
}

# TODO get the linux screenshot
ssh_screenshot_linux() {
    set -x
    local host_file="${PATH_TO_SSH}/tool/screenshot.sh"
    local dut_dir="/tmp/"

    local host_dir="$1"
    local dut_file="/tmp/screenshot.png"
    ssh_cp ; sleep 1
    ${PATH_TO_SSH}/ssh_to_dut $user $password $DUT_IP "sh -x /tmp/screenshot.sh linux && exit" #send a cmd
    sleep 1;
    set +x
    ssh_fetch
}


# TODO get the factory log
ssh_factory_bug() {
    local host_dir="/tmp"
    local dut_file="/tmp/screenshot.png"

    ${PATH_TO_SSH}/ssh_to_dut $user $password $DUT_IP "factory_bug" #send a cmd
    sleep 15
    ssh_fetch
}

main() {
	local key

    remote_host_set $1
    xhost +$DUT_IP
    if [ "$#" == "1" ]; then
        ssh_sign
    fi

    while [ $# -ge 2 ]
    do
    key="$2"
    case "$key" in
      "--cp" )
        host_file="$3"
        dut_dir="$4"
        ssh_cp
        shift 3
        ;;
      "--fetch" )
        dut_file="$3"
        host_dir="$4"
        ssh_fetch
        shift 3
        ;;
      "--diff" )
        dut_file="$3"
        host_file="$4"
        ssh_diff
        shift 3
        ;;
      "--screenshot" )
        host_dir="$3"
        ssh_screenshot_chrome $host_dir
        shift 2
        ;;
      "-s" )
        host_dir="$3"
        ssh_screenshot_linux $host_dir
        shift 2
        ;;
      "--factory_bug" )
        host_dir="$3"
        shift 2
        ;;
      "--cmd" )
        cmd=$3
        ssh_sign
        shift 2
        ;;
      * )
        usage_help
        exit 1
        ;;
    esac
    done


}
main "$@"





